{"version":3,"sources":["updateAction.js","Step1.js","Step2.js","Step3.js","Results.js","App.js","reportWebVitals.js","index.js"],"names":["updateAction","state","payload","console","log","withRouter","props","useForm","register","errors","formState","handleSubmit","useStateMachine","actions","onSubmit","data","history","push","required","pattern","firstName","maxLength","lastName","value","gender","emailAddress","type","date","occupation","defaultValue","previousEmployer","min","max","yearsOfExp","describe","five","Result","JSON","stringify","createStore","App","exact","path","component","Step1","Step2","Step3","Results","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70311088.chunk.js","sourcesContent":["export default function updateAction(state, payload) {\r\n    console.log(\"state:\", state);\r\n    console.log(\"payload:\", payload);\r\n    return {\r\n      ...state,\r\n      ...payload\r\n    };\r\n  }\r\n  ","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { useStateMachine } from \"little-state-machine\";\r\nimport updateAction from \"./updateAction\";\r\n\r\nconst Step1 = (props) => {\r\n  const { register, formState:{ errors}, handleSubmit } = useForm();\r\n  const { actions, state } = useStateMachine({ updateAction });\r\n  const onSubmit = (data) => {\r\n    actions.updateAction(data);\r\n    props.history.push(\"./step2\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <h2>Step 1</h2>\r\n      <label>\r\n        First Name:\r\n        <input {...register(\"firstName\", {required: true, pattern:/^[A-Za-z]+$/})} />\r\n        {errors.firstName && \"First Name is required\"}\r\n        \r\n      </label>\r\n      <label>\r\n        Last Name:\r\n        <input {...register(\"lastName\", {required: true, maxLength : 20})}  />\r\n        {errors.lastName && \"Last Name is required\"}\r\n      </label>\r\n      <label>\r\n          Gender:\r\n      <select {...register(\"gender\",{required: true})}>\r\n        <option value=\"female\">female</option>\r\n        <option value=\"male\">male</option>\r\n        <option value=\"other\">other</option>\r\n      </select>\r\n      {errors.gender && \"Sex is required\"}\r\n      </label>\r\n      \r\n      <label>\r\n          Email Address:\r\n          <input {...register(\"emailAddress\",{required: true, pattern : /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/})} />\r\n          {errors.emailAddress && \"You have entered an invalid email address!\"}\r\n      </label>\r\n      <input type=\"submit\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default withRouter(Step1);","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { useStateMachine } from \"little-state-machine\";\r\nimport updateAction from \"./updateAction\";\r\n\r\nconst Step2 = (props) => {\r\n  const { register, formState:{errors}, handleSubmit } = useForm();\r\n  const { state, actions } = useStateMachine({ updateAction });\r\n  const onSubmit = (data) => {\r\n    actions.updateAction(data);\r\n    props.history.push(\"./step3\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <h2>Step 2</h2>\r\n      <label>\r\n        Date of Birth:\r\n        <input type=\"date\" {...register(\"date\",{required:true})}  />\r\n        {errors.date && \"Date of Birth is required\"}\r\n      </label>\r\n      <label>\r\n        Occupation:\r\n        <input  {...register(\"occupation\",{required:true})}  />\r\n        {errors.occupation && \"Occupation field is required\"}\r\n      </label>\r\n      <label>\r\n        Previous Employer:\r\n        <input  {...register(\"previousEmployer\",{required:true})} defaultValue=\"none\"  />\r\n        {errors.previousEmployer && \"Field is required\"}\r\n      </label>\r\n      <label>\r\n          Current Employer\r\n      <input  {...register(\"previousEmployer\",{required:true})}  />\r\n        {errors.previousEmployer && \"Field is required\"}\r\n      </label>\r\n      <label>\r\n        Years of experience:\r\n        <input type=\"number\"{...register(\"yearsOfExp\",{required:true, min:1,max:99})} />\r\n        {errors.yearsOfExp && \"Years of experience is required\"}\r\n      </label>\r\n      <input type=\"submit\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default withRouter(Step2);","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { useStateMachine } from \"little-state-machine\";\r\nimport updateAction from \"./updateAction\";\r\n\r\nconst Step3 = (props) => {\r\n  const { register, formState:{errors},handleSubmit } = useForm();\r\n  const { state, actions } = useStateMachine({ updateAction });\r\n  const onSubmit = (data) => {\r\n    actions.updateAction(data);\r\n    props.history.push(\"./result\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <h2>Step 3</h2>\r\n      <label>\r\n        Describe yourself:\r\n        <input type=\"textarea\" {...register(\"describe\",{required:true})}  />\r\n        {errors.describe && \"This field can't be left empty\"}\r\n      </label>\r\n      <label>\r\n        Where do you see yourself in 5 years?:\r\n        <input {...register(\"five\")} />\r\n        {errors.five && \"This field can't be left empty\"}\r\n      </label>\r\n      <input type=\"submit\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default withRouter(Step3);","import React from \"react\";\r\nimport { useStateMachine } from \"little-state-machine\";\r\nimport updateAction from \"./updateAction\";\r\n\r\nconst Result = (props) => {\r\n  const { state } = useStateMachine(updateAction);\r\n\r\n  return (\r\n    <>\r\n      <h2>Congratulation !!!!!</h2>\r\n      <pre>{JSON.stringify(state, null, 2)}</pre>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { StateMachineProvider, createStore } from \"little-state-machine\";\nimport Step1 from \"./Step1\";\nimport Step2 from \"./Step2\";\nimport Step3 from \"./Step3\";\nimport Results from \"./Results\";\nimport \"./index.css\"\n\n\ncreateStore({});\n\nfunction App() {\n  return (\n    <StateMachineProvider>\n      <h1>Carl's Multistep Form</h1>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Step1} />\n          <Route path=\"/step2\" component={Step2} />\n          <Route path=\"/step3\" component={Step3} />\n          <Route path=\"/results\" component={Results} />\n        </Switch>\n      </Router>\n    </StateMachineProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}